/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package explorador;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 *
 * @author Pc
 */
public class InterfazExplorador extends javax.swing.JFrame implements MouseListener, ActionListener{

    /**
     * Creates new form InterfazExplorador
     */
    public static JPanel ultimoClickeado;
    public InterfazExplorador() {
        //Explorador Expl = new Explorador();
        initComponents();
        pintar();
        pintar_arbol();
        Direccion.setText(Explorador.Direccion);
        ImageIcon img_carpeta = new ImageIcon(getClass().getResource("/Imagenes/folder.png"));
        ImageIcon img3 = new ImageIcon(img_carpeta.getImage().getScaledInstance(carpeta.getWidth(), carpeta.getHeight(), Image.SCALE_DEFAULT));
        carpeta.setIcon(img3);
        Elementos.setText("Se encontraron: "+Explorador.currentDir.getChildNodes().getLength()+" Elementos");
        this.usuario.setText(Explorador.currentUser.getAttribute("nombre")+": ");
        this.setVisible(true);
        jMenuItem6.setEnabled(Explorador.estadoPegar);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jPanelMenu = new javax.swing.JPanel();
        cerrarSesion = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        Direccion = new javax.swing.JLabel();
        atras = new javax.swing.JButton();
        TextoBuscar = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        usuario = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanelContenido = new javax.swing.JPanel();
        carpeta = new javax.swing.JLabel();
        Elementos = new javax.swing.JLabel();

        jMenuItem1.setText("Nuevo Directorio");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        jMenuItem2.setText("Nuevo Archivo");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem2);
        jPopupMenu1.add(jSeparator2);

        jMenuItem3.setText("Eliminar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem3);
        jPopupMenu1.add(jSeparator3);

        jMenuItem4.setText("Copiar");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem4);

        jMenuItem5.setText("Cortar");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem5);

        jMenuItem6.setText("Pegar");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem6);

        jMenuItem7.setText("Editar");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem7);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Explorador de Archivos");
        setBackground(new java.awt.Color(0, 0, 0));
        setResizable(false);

        jPanelMenu.setBackground(new java.awt.Color(0, 102, 102));
        jPanelMenu.setForeground(new java.awt.Color(0, 102, 102));

        cerrarSesion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icons8_Shutdown_25px.png"))); // NOI18N
        cerrarSesion.setText("Cerrar Sesion");
        cerrarSesion.setMinimumSize(new java.awt.Dimension(30, 30));
        cerrarSesion.setPreferredSize(new java.awt.Dimension(20, 20));
        cerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrarSesionActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/carpeta (5).png"))); // NOI18N
        jButton2.setText("Buscar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Direccion.setBackground(new java.awt.Color(255, 255, 255));
        Direccion.setText(" ");
        Direccion.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Direccion.setOpaque(true);

        atras.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icons8_Back_25px_10.png"))); // NOI18N
        atras.setText("Carpeta Superior");
        atras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atrasActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/carpeta (1).png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/carpeta (4).png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/carpeta (2).png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/crear (1).png"))); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        usuario.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        usuario.setForeground(new java.awt.Color(255, 255, 255));
        usuario.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanelMenuLayout = new javax.swing.GroupLayout(jPanelMenu);
        jPanelMenu.setLayout(jPanelMenuLayout);
        jPanelMenuLayout.setHorizontalGroup(
            jPanelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMenuLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usuario, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Direccion, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(atras)
                .addGap(27, 27, 27)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(TextoBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(jButton2)
                .addGap(65, 65, 65)
                .addComponent(cerrarSesion, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelMenuLayout.setVerticalGroup(
            jPanelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addGroup(jPanelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cerrarSesion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(atras)
                        .addComponent(Direccion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(TextoBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMenuLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(usuario, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Mi PC");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("colors");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("blue");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("violet");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("red");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("yellow");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("sports");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("basketball");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("soccer");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("football");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("hockey");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("food");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("hot dogs");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("pizza");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("ravioli");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("bananas");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        jScrollPane2.setMaximumSize(new java.awt.Dimension(854, 400));

        jPanelContenido.setBackground(new java.awt.Color(255, 255, 255));
        jPanelContenido.setComponentPopupMenu(jPopupMenu1);
        jPanelContenido.setLayout(new java.awt.GridLayout(0, 8));
        jScrollPane2.setViewportView(jPanelContenido);

        carpeta.setText(" ");
        carpeta.setMaximumSize(new java.awt.Dimension(45, 45));
        carpeta.setMinimumSize(new java.awt.Dimension(45, 45));
        carpeta.setPreferredSize(new java.awt.Dimension(45, 45));

        Elementos.setBackground(new java.awt.Color(0, 0, 0));
        Elementos.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(carpeta, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Elementos, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(895, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(carpeta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Elementos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTree1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTree1MouseClicked

    private void cerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarSesionActionPerformed
        // TODO add your handling code here:
        Usuario.cerrarSesion();
            this.dispose();
            new InterfazInicio();
    }//GEN-LAST:event_cerrarSesionActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if(!TextoBuscar.getText().isEmpty()){                       
            //this.dispose();
            new InterfazBusqueda(TextoBuscar.getText());
            TextoBuscar.setText("");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void atrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atrasActionPerformed
       if(Explorador.getCurrentLevel() > 1){
                Explorador.currentDir = (Element) Explorador.currentDir.getParentNode();
                this.dispose();
                reducirDireccion();
                new InterfazExplorador();
                Explorador.setCurrentLevel(Explorador.getCurrentLevel() - 1);                
        }
    }//GEN-LAST:event_atrasActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        new InterfazCrearElemento("Directorio");  
        this.dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        new InterfazCrearElemento("Archivo");  
        this.dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        JLabel nombreElemento = (JLabel) ultimoClickeado.getComponent(2);
            JLabel tipoElemento = (JLabel) ultimoClickeado.getComponent(1);
            if(tipoElemento.getText().equals("archivo")){
                Element removido = Archivo.obtenerNodoHijo(nombreElemento.getText());
                if(removido.getAttribute("escritura").equals("Público") || removido.getAttribute("dueño").equals(Explorador.currentUser.getAttribute("nombre"))){
                    Archivo a = new Archivo(Integer.parseInt(removido.getAttribute("id")), removido.getAttribute("nombre"), removido.getNodeName(), "Lorem", true, true, "adm");
                    a.eliminar();
                    jMenuItem6.setEnabled(false);
                    //pegar.setEnabled(false);
                    Explorador.estadoPegar = false;
                    ultimoClickeado = null;            
                    this.dispose();
                    new InterfazExplorador();
                }else{
                    JOptionPane.showMessageDialog(null, "No tienes permisos para eliminar este elemento", "Acceso denegado", JOptionPane.ERROR_MESSAGE);
                }
            }else{
                Element removido = Directorio.obtenerNodoHijo(nombreElemento.getText());
                if(removido.getAttribute("escritura").equals("Público") || removido.getAttribute("dueño").equals(Explorador.currentUser.getAttribute("nombre"))){  
                    Directorio d = new Directorio(Integer.parseInt(removido.getAttribute("id")), removido.getAttribute("nombre"), removido.getNodeName(), true, true, "admn");
                    d.eliminar();
                    jMenuItem6.setEnabled(false);
                    //pegar.setEnabled(false);
                    Explorador.estadoPegar = false;
                    ultimoClickeado = null;            
                    this.dispose();
                    new InterfazExplorador();
                }else{
                    JOptionPane.showMessageDialog(null, "No tienes permisos para eliminar este elemento", "Acceso denegado", JOptionPane.ERROR_MESSAGE);
                }
            }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        JLabel nombreElemento = (JLabel) ultimoClickeado.getComponent(2);
            JLabel tipoElemento = (JLabel) ultimoClickeado.getComponent(1);           
            if(tipoElemento.getText().equals("archivo"))
                Explorador.elementoaPegar = Archivo.obtenerNodoHijo(nombreElemento.getText());
            else
                Explorador.elementoaPegar = Directorio.obtenerNodoHijo(nombreElemento.getText());
            if(Explorador.elementoaPegar.getAttribute("escritura").equals("Público") || Explorador.elementoaPegar.getAttribute("dueño").equals(Explorador.currentUser.getAttribute("nombre"))){
                jMenuItem6.setEnabled(true);
                //pegar.setEnabled(true);
                Explorador.estadoPegar = true;
            }else{
                JOptionPane.showMessageDialog(null, "No tienes permisos para copiar este elemento", "Acceso denegado", JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        
        JLabel nombreElemento = (JLabel) ultimoClickeado.getComponent(2);
            JLabel tipoElemento = (JLabel) ultimoClickeado.getComponent(1);
            if(tipoElemento.getText().equals("archivo"))
                Explorador.elementoaPegar = Archivo.obtenerNodoHijo(nombreElemento.getText());
            else
                Explorador.elementoaPegar = Directorio.obtenerNodoHijo(nombreElemento.getText());
            if(Explorador.elementoaPegar.getAttribute("escritura").equals("Público") || Explorador.elementoaPegar.getAttribute("dueño").equals(Explorador.currentUser.getAttribute("nombre"))){
                int id_removido = Integer.parseInt(Explorador.elementoaPegar.getAttribute("id"));
                Elemento removido = new Elemento(id_removido, nombreElemento.getText(), tipoElemento.getText());
                removido.eliminar();
                jMenuItem6.setEnabled(true);
                //pegar.setEnabled(true);
                Explorador.estadoPegar = true;   
            }else{
                JOptionPane.showMessageDialog(null, "No tienes permisos para cortar este elemento", "Acceso denegado", JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        System.out.println(Explorador.elementoaPegar);
            if(Explorador.elementoaPegar.getNodeName().equals("archivo")){
                Archivo archivo = new Archivo(Explorador.getCurrentId(), Explorador.elementoaPegar.getAttribute("nombre"), "Archivo", "Lorem", true, true, "adm");
                if(Archivo.obtenerNodoHijo(Explorador.elementoaPegar.getAttribute("nombre")) == null){
                    archivo.clonar();
                    this.dispose();
                    new InterfazExplorador();
                }
                else{
                    JOptionPane.showMessageDialog(null, "Ya existe un archivo con ese nombre", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }else{
                Directorio directorio = new Directorio(Explorador.getCurrentId(), Explorador.elementoaPegar.getAttribute("nombre"), "directorio", true, true, "Adm");
                if(Directorio.obtenerNodoHijo(Explorador.elementoaPegar.getAttribute("nombre")) == null){
                    directorio.clonar();
                    this.dispose();
                    new InterfazExplorador();
                }
                else{
                    JOptionPane.showMessageDialog(null, "Ya existe un directorio con ese nombre", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    //Boton editar
    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        JLabel nombreDirectorio = (JLabel) ultimoClickeado.getComponent(2);
            JLabel tipoElemento = (JLabel) ultimoClickeado.getComponent(1);
            Element ultimo;
            if(tipoElemento.getText().equals("directorio")){
                ultimo = Directorio.obtenerNodoHijo(nombreDirectorio.getText());
            }else{
                ultimo = Archivo.obtenerNodoHijo(nombreDirectorio.getText());
            }
            if(ultimo.getAttribute("escritura").equals("Público") || ultimo.getAttribute("dueño").equals(Explorador.currentUser.getAttribute("nombre"))){                    
                this.dispose();
                new InterfazEditarElemento(tipoElemento.getText());
            }else{
            JOptionPane.showMessageDialog(null, "No tienes permisos para editar este elemento", "Acceso denegado", JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.jMenuItem7ActionPerformed(evt);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.jMenuItem3ActionPerformed(evt);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.jMenuItem2ActionPerformed(evt);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        this.jMenuItem1ActionPerformed(evt);
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    /*public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazExplorador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazExplorador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazExplorador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazExplorador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazExplorador().setVisible(true);
            }
        });
    }*/
    
    public void aumentarDireccion(){
        Explorador.Direccion=(Explorador.Direccion+"\\"+Explorador.currentDir.getAttributes().getNamedItem("nombre").getTextContent());
        System.out.println(Explorador.Direccion);
    }
    
    public void reducirDireccion(){
        int finalOccurrence = Explorador.Direccion.lastIndexOf("\\");
        Explorador.Direccion=(Explorador.Direccion.substring(0, finalOccurrence));
        System.out.println(Explorador.Direccion);
    }
    
    public void pintar(){
        NodeList listaNodos = Explorador.currentDir.getChildNodes();
        
        for(int i = 0; i < listaNodos.getLength(); i++){
            //if (listaNodos.item(i).getAttributes().getNamedItem("dueño").getTextContent().equals(Explorador.currentUser.getAttribute("nombre"))) {
                Panel panel = new Panel(listaNodos.item(i).getNodeName(), listaNodos.item(i).getAttributes().getNamedItem("nombre").getTextContent());
                JPanel elemento = panel.crear();
                elemento.addMouseListener(this);
                elemento.setComponentPopupMenu(jPopupMenu1);
                jPanelContenido.add(elemento);
            //}            
        }
    }
    
    public void pintar_arbol(){
        //javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Mi PC");
        javax.swing.tree.DefaultMutableTreeNode hijo;
        Node raiz = Explorador.arbol.getDocumentElement();
        hijo=pintar_arbol_recursivo(raiz,"Mi PC");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(hijo));
    }
    
    public javax.swing.tree.DefaultMutableTreeNode pintar_arbol_recursivo(Node raiz,String nombreraiz){
        javax.swing.tree.DefaultMutableTreeNode padre = new javax.swing.tree.DefaultMutableTreeNode(nombreraiz);
        javax.swing.tree.DefaultMutableTreeNode hijo;
        NodeList listaNodos = raiz.getChildNodes();
        for(int i = 0; i < listaNodos.getLength(); i++){
            if(listaNodos.item(i).getNodeName().equals("directorio")){
                hijo=pintar_arbol_recursivo(listaNodos.item(i),listaNodos.item(i).getAttributes().getNamedItem("nombre").getTextContent());
                padre.add(hijo);
            }
            else{
                hijo = new javax.swing.tree.DefaultMutableTreeNode(listaNodos.item(i).getAttributes().getNamedItem("nombre").getTextContent());
                padre.add(hijo);
            }
        }
        return padre;
        
    }

    @Override
    public void mousePressed(MouseEvent e) {
    
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    
    }

    @Override
    public void mouseExited(MouseEvent e) {
    
    }

    
    class Panel{
        private final String tipo, nombre;
        
        public Panel(String tipo, String nombre){
            this.tipo = tipo;
            this.nombre = nombre;
        }
        
        public JPanel crear(){
            JPanel panel = new JPanel();
            panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
            JLabel nombre = new JLabel(this.nombre);
            nombre.setAlignmentX(Component.CENTER_ALIGNMENT);
            JLabel tipo = new JLabel(this.tipo);
            tipo.setAlignmentX(Component.CENTER_ALIGNMENT);
            JLabel imagen = new JLabel("");
            imagen.setAlignmentX(Component.CENTER_ALIGNMENT);
            imagen.setSize(60, 60);
            if(this.tipo.equals("directorio")){
                ImageIcon img_directorio = new ImageIcon(getClass().getResource("/Imagenes/folder.png"));
                ImageIcon img = new ImageIcon(img_directorio.getImage().getScaledInstance(imagen.getWidth(), imagen.getHeight(), Image.SCALE_DEFAULT));
                imagen.setIcon(img);
            }
            if(this.tipo.equals("archivo")){
                ImageIcon img_archivo = new ImageIcon(getClass().getResource("/Imagenes/document.png"));
                ImageIcon img = new ImageIcon(img_archivo.getImage().getScaledInstance(imagen.getWidth(), imagen.getHeight(), Image.SCALE_DEFAULT));
                imagen.setIcon(img);
            }
            panel.add(imagen);
            panel.add(tipo);
            panel.add(nombre);
            panel.setBackground(Color.WHITE);
            return panel;
        }
    }
    
    @Override
    public void mouseClicked(MouseEvent me) {
        if(ultimoClickeado != null)
            ultimoClickeado.setBackground(Color.WHITE);
        me.getComponent().setBackground(new Color(187, 211, 249));
        ultimoClickeado = (JPanel) me.getComponent();
        JLabel tipoComponente = (JLabel) ultimoClickeado.getComponent(1);
        
        //Doble click = abrir
        if (me.getClickCount()==2 && tipoComponente.getText().equals("directorio")){
            JLabel nombreDirectorio = (JLabel) ultimoClickeado.getComponent(2);
            Element ultimo = Directorio.obtenerNodoHijo(nombreDirectorio.getText());
            if(ultimo.getAttribute("lectura").equals("Público") || ultimo.getAttribute("dueño").equals(Explorador.currentUser.getAttribute("nombre"))){
                Explorador.currentDir = Directorio.obtenerNodoHijo(nombreDirectorio.getText());
                this.dispose();   
                aumentarDireccion();
                new InterfazExplorador();
                Explorador.setCurrentLevel(Explorador.getCurrentLevel() + 1);
            }else{
                JOptionPane.showMessageDialog(null, "No tienes permisos de lectura de este fichero", "Error de acceso", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    
    public void actionPerformed(ActionEvent ae) {
        /*if(ae.getSource() == crearArchivo){
            new InterfazCrearElemento("Archivo");  
            this.dispose();
        }
        if(ae.getSource() == crearDirectorio){       
            new InterfazCrearElemento("Directorio");  
            this.dispose();
        }
        if(ae.getSource() == abrir){
            JLabel nombreDirectorio = (JLabel) ultimoClickeado.getComponent(1);
            Element ultimo = Directorio.obtenerNodoHijo(nombreDirectorio.getText());
            if(ultimo.getAttribute("lectura").equals("Público") || ultimo.getAttribute("dueño").equals(Explorador.currentUser.getAttribute("nombre"))){
                Explorador.currentDir = Directorio.obtenerNodoHijo(nombreDirectorio.getText());
                this.dispose();               
                new InterfazExplorador();
                Explorador.setCurrentLevel(Explorador.getCurrentLevel() + 1);
            }else{
                JOptionPane.showMessageDialog(null, "No tienes permisos de lectura de este fichero", "Error de acceso", JOptionPane.ERROR_MESSAGE);
            }        
        }
        if(ae.getSource() == atras){
            if(Explorador.getCurrentLevel() > 1){
                Explorador.currentDir = (Element) Explorador.currentDir.getParentNode();
                this.dispose();
                new InterfazExplorador();
                Explorador.setCurrentLevel(Explorador.getCurrentLevel() - 1);
            }
        }
        if(ae.getSource() == copiar){
            JLabel nombreElemento = (JLabel) ultimoClickeado.getComponent(1);
            JLabel tipoElemento = (JLabel) ultimoClickeado.getComponent(0);           
            if(tipoElemento.getText().equals("archivo"))
                Explorador.elementoaPegar = Archivo.obtenerNodoHijo(nombreElemento.getText());
            else
                Explorador.elementoaPegar = Directorio.obtenerNodoHijo(nombreElemento.getText());
            if(Explorador.elementoaPegar.getAttribute("escritura").equals("Público") || Explorador.elementoaPegar.getAttribute("dueño").equals(Explorador.currentUser.getAttribute("nombre"))){
                pegar.setEnabled(true);
                Explorador.estadoPegar = true;
            }else{
                JOptionPane.showMessageDialog(null, "No tienes permisos para copiar este elemento", "Acceso denegado", JOptionPane.ERROR_MESSAGE);
            }
        }
        if(ae.getSource() == cortar){
            JLabel nombreElemento = (JLabel) ultimoClickeado.getComponent(1);
            JLabel tipoElemento = (JLabel) ultimoClickeado.getComponent(0);
            if(tipoElemento.getText().equals("archivo"))
                Explorador.elementoaPegar = Archivo.obtenerNodoHijo(nombreElemento.getText());
            else
                Explorador.elementoaPegar = Directorio.obtenerNodoHijo(nombreElemento.getText());
            if(Explorador.elementoaPegar.getAttribute("escritura").equals("Público") || Explorador.elementoaPegar.getAttribute("dueño").equals(Explorador.currentUser.getAttribute("nombre"))){
                int id_removido = Integer.parseInt(Explorador.elementoaPegar.getAttribute("id"));
                Elemento removido = new Elemento(id_removido, nombreElemento.getText(), tipoElemento.getText());
                removido.eliminar();
                pegar.setEnabled(true);
                Explorador.estadoPegar = true;   
            }else{
                JOptionPane.showMessageDialog(null, "No tienes permisos para cortar este elemento", "Acceso denegado", JOptionPane.ERROR_MESSAGE);
            }      
        }
        if(ae.getSource() == pegar){
            System.out.println(Explorador.elementoaPegar);
            if(Explorador.elementoaPegar.getNodeName().equals("archivo")){
                Archivo archivo = new Archivo(Explorador.getCurrentId(), Explorador.elementoaPegar.getAttribute("nombre"), "Archivo", "Lorem", true, true, "adm");
                archivo.agregar();
                this.dispose();
                new InterfazExplorador();
            }else{
                Directorio directorio = new Directorio(Explorador.getCurrentId(), Explorador.elementoaPegar.getAttribute("nombre"), "directorio", true, true, "Adm");
                directorio.clonar();
                this.dispose();
                new InterfazExplorador();
            }
        }
        if(ae.getSource() == eliminar){
            JLabel nombreElemento = (JLabel) ultimoClickeado.getComponent(1);
            JLabel tipoElemento = (JLabel) ultimoClickeado.getComponent(0);
            if(tipoElemento.getText().equals("archivo")){
                Element removido = Archivo.obtenerNodoHijo(nombreElemento.getText());
                if(removido.getAttribute("escritura").equals("Público") || removido.getAttribute("dueño").equals(Explorador.currentUser.getAttribute("nombre"))){
                    Archivo a = new Archivo(Integer.parseInt(removido.getAttribute("id")), removido.getAttribute("nombre"), removido.getNodeName(), "Lorem", true, true, "adm");
                    a.eliminar();
                    pegar.setEnabled(false);
                    Explorador.estadoPegar = false;
                    ultimoClickeado = null;            
                    this.dispose();
                    new InterfazExplorador();
                }else{
                    JOptionPane.showMessageDialog(null, "No tienes permisos para cortar este elemento", "Acceso denegado", JOptionPane.ERROR_MESSAGE);
                }
            }else{
                Element removido = Directorio.obtenerNodoHijo(nombreElemento.getText());
                if(removido.getAttribute("escritura").equals("Público") || removido.getAttribute("dueño").equals(Explorador.currentUser.getAttribute("nombre"))){  
                    Directorio d = new Directorio(Integer.parseInt(removido.getAttribute("id")), removido.getAttribute("nombre"), removido.getNodeName(), true, true, "admn");
                    d.eliminar();
                    pegar.setEnabled(false);
                    Explorador.estadoPegar = false;
                    ultimoClickeado = null;            
                    this.dispose();
                    new InterfazExplorador();
                }else{
                    JOptionPane.showMessageDialog(null, "No tienes permisos para cortar este elemento", "Acceso denegado", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        if(ae.getSource() == editar){                         
            JLabel nombreDirectorio = (JLabel) ultimoClickeado.getComponent(1);
            JLabel tipoElemento = (JLabel) ultimoClickeado.getComponent(0);
            Element ultimo;
            if(tipoElemento.getText().equals("directorio")){
                ultimo = Directorio.obtenerNodoHijo(nombreDirectorio.getText());
            }else{
                ultimo = Archivo.obtenerNodoHijo(nombreDirectorio.getText());
            }
            if(ultimo.getAttribute("escritura").equals("Público") || ultimo.getAttribute("dueño").equals(Explorador.currentUser.getAttribute("nombre"))){                    
                this.dispose();
                new InterfazEditarElemento(tipoElemento.getText());
            }else{
            JOptionPane.showMessageDialog(null, "No tienes permisos para cortar este elemento", "Acceso denegado", JOptionPane.ERROR_MESSAGE);
            }
        }*/
        /*if(ae.getSource() == cerrarSesion){
            Usuario.cerrarSesion();
            this.dispose();
            new InterfazInicio();
        }*/
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Direccion;
    private javax.swing.JLabel Elementos;
    private javax.swing.JTextField TextoBuscar;
    private javax.swing.JButton atras;
    private javax.swing.JLabel carpeta;
    private javax.swing.JButton cerrarSesion;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanelContenido;
    private javax.swing.JPanel jPanelMenu;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JTree jTree1;
    private javax.swing.JLabel usuario;
    // End of variables declaration//GEN-END:variables
}
